package rwcjom.awit.com.rwcjo_m.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import rwcjom.awit.com.rwcjo_m.dao.Ori_data;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORI_DATA.
*/
public class Ori_dataDao extends AbstractDao<Ori_data, Void> {

    public static final String TABLENAME = "ORI_DATA";

    /**
     * Properties of entity Ori_data.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Bffb = new Property(0, String.class, "bffb", false, "BFFB");
        public final static Property Bfpcode = new Property(1, String.class, "bfpcode", false, "BFPCODE");
        public final static Property Bfpl = new Property(2, String.class, "bfpl", false, "BFPL");
        public final static Property Bfpvalue = new Property(3, String.class, "bfpvalue", false, "BFPVALUE");
        public final static Property Mtime = new Property(4, String.class, "mtime", false, "MTIME");
        public final static Property F_lc = new Property(5, String.class, "f_lc", false, "F_LC");
    };

    private DaoSession daoSession;

    private Query<Ori_data> line_Extra_Ori_dataListQuery;

    public Ori_dataDao(DaoConfig config) {
        super(config);
    }
    
    public Ori_dataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORI_DATA' (" + //
                "'BFFB' TEXT," + // 0: bffb
                "'BFPCODE' TEXT," + // 1: bfpcode
                "'BFPL' TEXT," + // 2: bfpl
                "'BFPVALUE' TEXT," + // 3: bfpvalue
                "'MTIME' TEXT," + // 4: mtime
                "'F_LC' TEXT NOT NULL );"); // 5: f_lc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORI_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ori_data entity) {
        stmt.clearBindings();
 
        String bffb = entity.getBffb();
        if (bffb != null) {
            stmt.bindString(1, bffb);
        }
 
        String bfpcode = entity.getBfpcode();
        if (bfpcode != null) {
            stmt.bindString(2, bfpcode);
        }
 
        String bfpl = entity.getBfpl();
        if (bfpl != null) {
            stmt.bindString(3, bfpl);
        }
 
        String bfpvalue = entity.getBfpvalue();
        if (bfpvalue != null) {
            stmt.bindString(4, bfpvalue);
        }
 
        String mtime = entity.getMtime();
        if (mtime != null) {
            stmt.bindString(5, mtime);
        }
        stmt.bindString(6, entity.getF_lc());
    }

    @Override
    protected void attachEntity(Ori_data entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Ori_data readEntity(Cursor cursor, int offset) {
        Ori_data entity = new Ori_data( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bffb
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bfpcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bfpl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bfpvalue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mtime
            cursor.getString(offset + 5) // f_lc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ori_data entity, int offset) {
        entity.setBffb(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBfpcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBfpl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBfpvalue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setF_lc(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Ori_data entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Ori_data entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ori_dataList" to-many relationship of Line_Extra. */
    public List<Ori_data> _queryLine_Extra_Ori_dataList(String f_lc) {
        synchronized (this) {
            if (line_Extra_Ori_dataListQuery == null) {
                QueryBuilder<Ori_data> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.F_lc.eq(null));
                line_Extra_Ori_dataListQuery = queryBuilder.build();
            }
        }
        Query<Ori_data> query = line_Extra_Ori_dataListQuery.forCurrentThread();
        query.setParameter(0, f_lc);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLine_ExtraDao().getAllColumns());
            builder.append(" FROM ORI_DATA T");
            builder.append(" LEFT JOIN LINE__EXTRA T0 ON T.'F_LC'=T0.'LC'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Ori_data loadCurrentDeep(Cursor cursor, boolean lock) {
        Ori_data entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Line_Extra line_Extra = loadCurrentOther(daoSession.getLine_ExtraDao(), cursor, offset);
         if(line_Extra != null) {
            entity.setLine_Extra(line_Extra);
        }

        return entity;    
    }

    public Ori_data loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Ori_data> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Ori_data> list = new ArrayList<Ori_data>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Ori_data> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Ori_data> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
