package rwcjom.awit.com.rwcjo_m.dao;

import java.util.List;
import rwcjom.awit.com.rwcjo_m.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SEC_NEWS.
 */
public class SecNews {

    private String sectid;
    private String sectcode;
    private String sectname;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SecNewsDao myDao;

    private List<SiteNews> siteNewsList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SecNews() {
    }

    public SecNews(String sectid) {
        this.sectid = sectid;
    }

    public SecNews(String sectid, String sectcode, String sectname) {
        this.sectid = sectid;
        this.sectcode = sectcode;
        this.sectname = sectname;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSecNewsDao() : null;
    }

    public String getSectid() {
        return sectid;
    }

    public void setSectid(String sectid) {
        this.sectid = sectid;
    }

    public String getSectcode() {
        return sectcode;
    }

    public void setSectcode(String sectcode) {
        this.sectcode = sectcode;
    }

    public String getSectname() {
        return sectname;
    }

    public void setSectname(String sectname) {
        this.sectname = sectname;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SiteNews> getSiteNewsList() {
        if (siteNewsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SiteNewsDao targetDao = daoSession.getSiteNewsDao();
            List<SiteNews> siteNewsListNew = targetDao._querySecNews_SiteNewsList(sectid);
            synchronized (this) {
                if(siteNewsList == null) {
                    siteNewsList = siteNewsListNew;
                }
            }
        }
        return siteNewsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSiteNewsList() {
        siteNewsList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
