package rwcjom.awit.com.rwcjo_m.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rwcjom.awit.com.rwcjo_m.dao.BrgInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BRG_INFO.
*/
public class BrgInfoDao extends AbstractDao<BrgInfo, String> {

    public static final String TABLENAME = "BRG_INFO";

    /**
     * Properties of entity BrgInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Faceid = new Property(0, String.class, "faceid", true, "FACEID");
        public final static Property Structname = new Property(1, String.class, "structname", false, "STRUCTNAME");
        public final static Property Piernum = new Property(2, String.class, "piernum", false, "PIERNUM");
        public final static Property Beamspan = new Property(3, String.class, "beamspan", false, "BEAMSPAN");
        public final static Property Beamtype = new Property(4, String.class, "beamtype", false, "BEAMTYPE");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property F_siteid = new Property(6, String.class, "f_siteid", false, "F_SITEID");
        public final static Property F_faceid = new Property(7, String.class, "f_faceid", false, "F_FACEID");
    };


    public BrgInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BrgInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BRG_INFO' (" + //
                "'FACEID' TEXT PRIMARY KEY NOT NULL ," + // 0: faceid
                "'STRUCTNAME' TEXT," + // 1: structname
                "'PIERNUM' TEXT," + // 2: piernum
                "'BEAMSPAN' TEXT," + // 3: beamspan
                "'BEAMTYPE' TEXT," + // 4: beamtype
                "'REMARK' TEXT," + // 5: remark
                "'F_SITEID' TEXT," + // 6: f_siteid
                "'F_FACEID' TEXT);"); // 7: f_faceid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BRG_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BrgInfo entity) {
        stmt.clearBindings();
 
        String faceid = entity.getFaceid();
        if (faceid != null) {
            stmt.bindString(1, faceid);
        }
 
        String structname = entity.getStructname();
        if (structname != null) {
            stmt.bindString(2, structname);
        }
 
        String piernum = entity.getPiernum();
        if (piernum != null) {
            stmt.bindString(3, piernum);
        }
 
        String beamspan = entity.getBeamspan();
        if (beamspan != null) {
            stmt.bindString(4, beamspan);
        }
 
        String beamtype = entity.getBeamtype();
        if (beamtype != null) {
            stmt.bindString(5, beamtype);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String f_siteid = entity.getF_siteid();
        if (f_siteid != null) {
            stmt.bindString(7, f_siteid);
        }
 
        String f_faceid = entity.getF_faceid();
        if (f_faceid != null) {
            stmt.bindString(8, f_faceid);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BrgInfo readEntity(Cursor cursor, int offset) {
        BrgInfo entity = new BrgInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // faceid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // structname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // piernum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // beamspan
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // beamtype
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // f_siteid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // f_faceid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BrgInfo entity, int offset) {
        entity.setFaceid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStructname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPiernum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBeamspan(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBeamtype(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setF_siteid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setF_faceid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BrgInfo entity, long rowId) {
        return entity.getFaceid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BrgInfo entity) {
        if(entity != null) {
            return entity.getFaceid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
