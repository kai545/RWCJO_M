package rwcjom.awit.com.rwcjo_m.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rwcjom.awit.com.rwcjo_m.dao.LineExtra;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LINE_EXTRA.
*/
public class LineExtraDao extends AbstractDao<LineExtra, String> {

    public static final String TABLENAME = "LINE_EXTRA";

    /**
     * Properties of entity LineExtra.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Lc = new Property(0, String.class, "lc", true, "LC");
        public final static Property Ltype = new Property(1, String.class, "ltype", false, "LTYPE");
        public final static Property Mtype = new Property(2, String.class, "mtype", false, "MTYPE");
        public final static Property DevBrand = new Property(3, String.class, "devBrand", false, "DEV_BRAND");
        public final static Property DevType = new Property(4, String.class, "devType", false, "DEV_TYPE");
        public final static Property DevSN = new Property(5, String.class, "devSN", false, "DEV_SN");
        public final static Property Stuffid = new Property(6, String.class, "stuffid", false, "STUFFID");
        public final static Property Stuff_name = new Property(7, String.class, "stuff_name", false, "STUFF_NAME");
        public final static Property Stuff_pwd = new Property(8, String.class, "stuff_pwd", false, "STUFF_PWD");
        public final static Property Temp = new Property(9, String.class, "temp", false, "TEMP");
        public final static Property Weather = new Property(10, String.class, "weather", false, "WEATHER");
        public final static Property Air = new Property(11, String.class, "air", false, "AIR");
        public final static Property Bpntsq = new Property(12, String.class, "bpntsq", false, "BPNTSQ");
        public final static Property Mdate = new Property(13, String.class, "mdate", false, "MDATE");
    };

    private DaoSession daoSession;


    public LineExtraDao(DaoConfig config) {
        super(config);
    }
    
    public LineExtraDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LINE_EXTRA' (" + //
                "'LC' TEXT PRIMARY KEY NOT NULL ," + // 0: lc
                "'LTYPE' TEXT," + // 1: ltype
                "'MTYPE' TEXT," + // 2: mtype
                "'DEV_BRAND' TEXT," + // 3: devBrand
                "'DEV_TYPE' TEXT," + // 4: devType
                "'DEV_SN' TEXT," + // 5: devSN
                "'STUFFID' TEXT," + // 6: stuffid
                "'STUFF_NAME' TEXT," + // 7: stuff_name
                "'STUFF_PWD' TEXT," + // 8: stuff_pwd
                "'TEMP' TEXT," + // 9: temp
                "'WEATHER' TEXT," + // 10: weather
                "'AIR' TEXT," + // 11: air
                "'BPNTSQ' TEXT," + // 12: bpntsq
                "'MDATE' TEXT);"); // 13: mdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LINE_EXTRA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LineExtra entity) {
        stmt.clearBindings();
 
        String lc = entity.getLc();
        if (lc != null) {
            stmt.bindString(1, lc);
        }
 
        String ltype = entity.getLtype();
        if (ltype != null) {
            stmt.bindString(2, ltype);
        }
 
        String mtype = entity.getMtype();
        if (mtype != null) {
            stmt.bindString(3, mtype);
        }
 
        String devBrand = entity.getDevBrand();
        if (devBrand != null) {
            stmt.bindString(4, devBrand);
        }
 
        String devType = entity.getDevType();
        if (devType != null) {
            stmt.bindString(5, devType);
        }
 
        String devSN = entity.getDevSN();
        if (devSN != null) {
            stmt.bindString(6, devSN);
        }
 
        String stuffid = entity.getStuffid();
        if (stuffid != null) {
            stmt.bindString(7, stuffid);
        }
 
        String stuff_name = entity.getStuff_name();
        if (stuff_name != null) {
            stmt.bindString(8, stuff_name);
        }
 
        String stuff_pwd = entity.getStuff_pwd();
        if (stuff_pwd != null) {
            stmt.bindString(9, stuff_pwd);
        }
 
        String temp = entity.getTemp();
        if (temp != null) {
            stmt.bindString(10, temp);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(11, weather);
        }
 
        String air = entity.getAir();
        if (air != null) {
            stmt.bindString(12, air);
        }
 
        String bpntsq = entity.getBpntsq();
        if (bpntsq != null) {
            stmt.bindString(13, bpntsq);
        }
 
        String mdate = entity.getMdate();
        if (mdate != null) {
            stmt.bindString(14, mdate);
        }
    }

    @Override
    protected void attachEntity(LineExtra entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LineExtra readEntity(Cursor cursor, int offset) {
        LineExtra entity = new LineExtra( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // lc
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ltype
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mtype
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // devBrand
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // devType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // devSN
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // stuffid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // stuff_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // stuff_pwd
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // temp
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // weather
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // air
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bpntsq
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // mdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LineExtra entity, int offset) {
        entity.setLc(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLtype(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMtype(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevBrand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDevSN(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStuffid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStuff_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStuff_pwd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTemp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeather(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAir(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBpntsq(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMdate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LineExtra entity, long rowId) {
        return entity.getLc();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LineExtra entity) {
        if(entity != null) {
            return entity.getLc();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
