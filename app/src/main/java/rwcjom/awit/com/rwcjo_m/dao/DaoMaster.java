package rwcjom.awit.com.rwcjo_m.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import rwcjom.awit.com.rwcjo_m.dao.FaceNewsDao;
import rwcjom.awit.com.rwcjo_m.dao.FaceInfoDao;
import rwcjom.awit.com.rwcjo_m.dao.BrgInfoDao;
import rwcjom.awit.com.rwcjo_m.dao.PntInfoDao;
import rwcjom.awit.com.rwcjo_m.dao.PersonInfoDao;
import rwcjom.awit.com.rwcjo_m.dao.BasePntInfoDao;
import rwcjom.awit.com.rwcjo_m.dao.LineDao;
import rwcjom.awit.com.rwcjo_m.dao.BwInfoDao;
import rwcjom.awit.com.rwcjo_m.dao.SecNewsDao;
import rwcjom.awit.com.rwcjo_m.dao.SiteNewsDao;
import rwcjom.awit.com.rwcjo_m.dao.LineExtraDao;
import rwcjom.awit.com.rwcjo_m.dao.OriDataDao;
import rwcjom.awit.com.rwcjo_m.dao.LineStationDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        FaceNewsDao.createTable(db, ifNotExists);
        FaceInfoDao.createTable(db, ifNotExists);
        BrgInfoDao.createTable(db, ifNotExists);
        PntInfoDao.createTable(db, ifNotExists);
        PersonInfoDao.createTable(db, ifNotExists);
        BasePntInfoDao.createTable(db, ifNotExists);
        LineDao.createTable(db, ifNotExists);
        BwInfoDao.createTable(db, ifNotExists);
        SecNewsDao.createTable(db, ifNotExists);
        SiteNewsDao.createTable(db, ifNotExists);
        LineExtraDao.createTable(db, ifNotExists);
        OriDataDao.createTable(db, ifNotExists);
        LineStationDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        FaceNewsDao.dropTable(db, ifExists);
        FaceInfoDao.dropTable(db, ifExists);
        BrgInfoDao.dropTable(db, ifExists);
        PntInfoDao.dropTable(db, ifExists);
        PersonInfoDao.dropTable(db, ifExists);
        BasePntInfoDao.dropTable(db, ifExists);
        LineDao.dropTable(db, ifExists);
        BwInfoDao.dropTable(db, ifExists);
        SecNewsDao.dropTable(db, ifExists);
        SiteNewsDao.dropTable(db, ifExists);
        LineExtraDao.dropTable(db, ifExists);
        OriDataDao.dropTable(db, ifExists);
        LineStationDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(FaceNewsDao.class);
        registerDaoClass(FaceInfoDao.class);
        registerDaoClass(BrgInfoDao.class);
        registerDaoClass(PntInfoDao.class);
        registerDaoClass(PersonInfoDao.class);
        registerDaoClass(BasePntInfoDao.class);
        registerDaoClass(LineDao.class);
        registerDaoClass(BwInfoDao.class);
        registerDaoClass(SecNewsDao.class);
        registerDaoClass(SiteNewsDao.class);
        registerDaoClass(LineExtraDao.class);
        registerDaoClass(OriDataDao.class);
        registerDaoClass(LineStationDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
