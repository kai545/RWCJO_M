package rwcjom.awit.com.rwcjo_m.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rwcjom.awit.com.rwcjo_m.dao.SiteNews;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SITE_NEWS.
*/
public class SiteNewsDao extends AbstractDao<SiteNews, String> {

    public static final String TABLENAME = "SITE_NEWS";

    /**
     * Properties of entity SiteNews.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Siteid = new Property(0, String.class, "siteid", true, "SITEID");
        public final static Property Sitecode = new Property(1, String.class, "sitecode", false, "SITECODE");
        public final static Property Sitename = new Property(2, String.class, "sitename", false, "SITENAME");
        public final static Property Startsite = new Property(3, String.class, "startsite", false, "STARTSITE");
        public final static Property Endsite = new Property(4, String.class, "endsite", false, "ENDSITE");
    };


    public SiteNewsDao(DaoConfig config) {
        super(config);
    }
    
    public SiteNewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SITE_NEWS' (" + //
                "'SITEID' TEXT PRIMARY KEY NOT NULL ," + // 0: siteid
                "'SITECODE' TEXT," + // 1: sitecode
                "'SITENAME' TEXT," + // 2: sitename
                "'STARTSITE' TEXT," + // 3: startsite
                "'ENDSITE' TEXT);"); // 4: endsite
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SITE_NEWS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SiteNews entity) {
        stmt.clearBindings();
 
        String siteid = entity.getSiteid();
        if (siteid != null) {
            stmt.bindString(1, siteid);
        }
 
        String sitecode = entity.getSitecode();
        if (sitecode != null) {
            stmt.bindString(2, sitecode);
        }
 
        String sitename = entity.getSitename();
        if (sitename != null) {
            stmt.bindString(3, sitename);
        }
 
        String startsite = entity.getStartsite();
        if (startsite != null) {
            stmt.bindString(4, startsite);
        }
 
        String endsite = entity.getEndsite();
        if (endsite != null) {
            stmt.bindString(5, endsite);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SiteNews readEntity(Cursor cursor, int offset) {
        SiteNews entity = new SiteNews( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // siteid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sitecode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sitename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startsite
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // endsite
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SiteNews entity, int offset) {
        entity.setSiteid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSitecode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSitename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartsite(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndsite(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SiteNews entity, long rowId) {
        return entity.getSiteid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SiteNews entity) {
        if(entity != null) {
            return entity.getSiteid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
