package rwcjom.awit.com.rwcjo_m.dao;

import rwcjom.awit.com.rwcjo_m.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BW_INFO.
 */
public class BwInfo {

    private Long bwid;
    private String id;
    private String od;
    private String ty;
    /** Not-null value. */
    private String f_lc;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BwInfoDao myDao;

    private Line line;
    private String line__resolvedKey;


    public BwInfo() {
    }

    public BwInfo(Long bwid) {
        this.bwid = bwid;
    }

    public BwInfo(Long bwid, String id, String od, String ty, String f_lc) {
        this.bwid = bwid;
        this.id = id;
        this.od = od;
        this.ty = ty;
        this.f_lc = f_lc;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBwInfoDao() : null;
    }

    public Long getBwid() {
        return bwid;
    }

    public void setBwid(Long bwid) {
        this.bwid = bwid;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getOd() {
        return od;
    }

    public void setOd(String od) {
        this.od = od;
    }

    public String getTy() {
        return ty;
    }

    public void setTy(String ty) {
        this.ty = ty;
    }

    /** Not-null value. */
    public String getF_lc() {
        return f_lc;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setF_lc(String f_lc) {
        this.f_lc = f_lc;
    }

    /** To-one relationship, resolved on first access. */
    public Line getLine() {
        String __key = this.f_lc;
        if (line__resolvedKey == null || line__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LineDao targetDao = daoSession.getLineDao();
            Line lineNew = targetDao.load(__key);
            synchronized (this) {
                line = lineNew;
            	line__resolvedKey = __key;
            }
        }
        return line;
    }

    public void setLine(Line line) {
        if (line == null) {
            throw new DaoException("To-one property 'f_lc' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.line = line;
            f_lc = line.getLc();
            line__resolvedKey = f_lc;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
