package rwcjom.awit.com.rwcjo_m.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rwcjom.awit.com.rwcjo_m.dao.PersonInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PERSON_INFO.
*/
public class PersonInfoDao extends AbstractDao<PersonInfo, String> {

    public static final String TABLENAME = "PERSON_INFO";

    /**
     * Properties of entity PersonInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", true, "USERID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Usertel = new Property(2, String.class, "usertel", false, "USERTEL");
        public final static Property Ptype = new Property(3, String.class, "ptype", false, "PTYPE");
        public final static Property F_sectid = new Property(4, String.class, "f_sectid", false, "F_SECTID");
    };


    public PersonInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PersonInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PERSON_INFO' (" + //
                "'USERID' TEXT PRIMARY KEY NOT NULL ," + // 0: userid
                "'USERNAME' TEXT," + // 1: username
                "'USERTEL' TEXT," + // 2: usertel
                "'PTYPE' TEXT," + // 3: ptype
                "'F_SECTID' TEXT);"); // 4: f_sectid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PERSON_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonInfo entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String usertel = entity.getUsertel();
        if (usertel != null) {
            stmt.bindString(3, usertel);
        }
 
        String ptype = entity.getPtype();
        if (ptype != null) {
            stmt.bindString(4, ptype);
        }
 
        String f_sectid = entity.getF_sectid();
        if (f_sectid != null) {
            stmt.bindString(5, f_sectid);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PersonInfo readEntity(Cursor cursor, int offset) {
        PersonInfo entity = new PersonInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // usertel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ptype
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // f_sectid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonInfo entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsertel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPtype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setF_sectid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(PersonInfo entity, long rowId) {
        return entity.getUserid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(PersonInfo entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
