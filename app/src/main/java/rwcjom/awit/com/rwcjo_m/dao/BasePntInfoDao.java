package rwcjom.awit.com.rwcjo_m.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rwcjom.awit.com.rwcjo_m.dao.BasePntInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BASE_PNT_INFO.
*/
public class BasePntInfoDao extends AbstractDao<BasePntInfo, String> {

    public static final String TABLENAME = "BASE_PNT_INFO";

    /**
     * Properties of entity BasePntInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Basepntid = new Property(0, String.class, "basepntid", true, "BASEPNTID");
        public final static Property Basepntname = new Property(1, String.class, "basepntname", false, "BASEPNTNAME");
        public final static Property Basepntcode = new Property(2, String.class, "basepntcode", false, "BASEPNTCODE");
        public final static Property Basepnthigh = new Property(3, String.class, "basepnthigh", false, "BASEPNTHIGH");
        public final static Property Basepntnum = new Property(4, String.class, "basepntnum", false, "BASEPNTNUM");
        public final static Property Basepntvar = new Property(5, String.class, "basepntvar", false, "BASEPNTVAR");
        public final static Property F_sectid = new Property(6, String.class, "f_sectid", false, "F_SECTID");
    };


    public BasePntInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BasePntInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BASE_PNT_INFO' (" + //
                "'BASEPNTID' TEXT PRIMARY KEY NOT NULL ," + // 0: basepntid
                "'BASEPNTNAME' TEXT," + // 1: basepntname
                "'BASEPNTCODE' TEXT," + // 2: basepntcode
                "'BASEPNTHIGH' TEXT," + // 3: basepnthigh
                "'BASEPNTNUM' TEXT," + // 4: basepntnum
                "'BASEPNTVAR' TEXT," + // 5: basepntvar
                "'F_SECTID' TEXT);"); // 6: f_sectid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BASE_PNT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BasePntInfo entity) {
        stmt.clearBindings();
 
        String basepntid = entity.getBasepntid();
        if (basepntid != null) {
            stmt.bindString(1, basepntid);
        }
 
        String basepntname = entity.getBasepntname();
        if (basepntname != null) {
            stmt.bindString(2, basepntname);
        }
 
        String basepntcode = entity.getBasepntcode();
        if (basepntcode != null) {
            stmt.bindString(3, basepntcode);
        }
 
        String basepnthigh = entity.getBasepnthigh();
        if (basepnthigh != null) {
            stmt.bindString(4, basepnthigh);
        }
 
        String basepntnum = entity.getBasepntnum();
        if (basepntnum != null) {
            stmt.bindString(5, basepntnum);
        }
 
        String basepntvar = entity.getBasepntvar();
        if (basepntvar != null) {
            stmt.bindString(6, basepntvar);
        }
 
        String f_sectid = entity.getF_sectid();
        if (f_sectid != null) {
            stmt.bindString(7, f_sectid);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BasePntInfo readEntity(Cursor cursor, int offset) {
        BasePntInfo entity = new BasePntInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // basepntid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // basepntname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // basepntcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // basepnthigh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // basepntnum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // basepntvar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // f_sectid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BasePntInfo entity, int offset) {
        entity.setBasepntid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBasepntname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBasepntcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBasepnthigh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBasepntnum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBasepntvar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setF_sectid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BasePntInfo entity, long rowId) {
        return entity.getBasepntid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BasePntInfo entity) {
        if(entity != null) {
            return entity.getBasepntid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
