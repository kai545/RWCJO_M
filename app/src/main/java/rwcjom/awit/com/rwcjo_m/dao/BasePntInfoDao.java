package rwcjom.awit.com.rwcjo_m.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rwcjom.awit.com.rwcjo_m.dao.BasePntInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BASE_PNT_INFO.
*/
public class BasePntInfoDao extends AbstractDao<BasePntInfo, String> {

    public static final String TABLENAME = "BASE_PNT_INFO";

    /**
     * Properties of entity BasePntInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Siteid = new Property(0, String.class, "siteid", true, "SITEID");
        public final static Property Sitename = new Property(1, String.class, "sitename", false, "SITENAME");
        public final static Property Sitecode = new Property(2, String.class, "sitecode", false, "SITECODE");
        public final static Property Sitehigh = new Property(3, String.class, "sitehigh", false, "SITEHIGH");
        public final static Property Sitenum = new Property(4, String.class, "sitenum", false, "SITENUM");
        public final static Property Sitevar = new Property(5, String.class, "sitevar", false, "SITEVAR");
    };


    public BasePntInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BasePntInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BASE_PNT_INFO' (" + //
                "'SITEID' TEXT PRIMARY KEY NOT NULL ," + // 0: siteid
                "'SITENAME' TEXT," + // 1: sitename
                "'SITECODE' TEXT," + // 2: sitecode
                "'SITEHIGH' TEXT," + // 3: sitehigh
                "'SITENUM' TEXT," + // 4: sitenum
                "'SITEVAR' TEXT);"); // 5: sitevar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BASE_PNT_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BasePntInfo entity) {
        stmt.clearBindings();
 
        String siteid = entity.getSiteid();
        if (siteid != null) {
            stmt.bindString(1, siteid);
        }
 
        String sitename = entity.getSitename();
        if (sitename != null) {
            stmt.bindString(2, sitename);
        }
 
        String sitecode = entity.getSitecode();
        if (sitecode != null) {
            stmt.bindString(3, sitecode);
        }
 
        String sitehigh = entity.getSitehigh();
        if (sitehigh != null) {
            stmt.bindString(4, sitehigh);
        }
 
        String sitenum = entity.getSitenum();
        if (sitenum != null) {
            stmt.bindString(5, sitenum);
        }
 
        String sitevar = entity.getSitevar();
        if (sitevar != null) {
            stmt.bindString(6, sitevar);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BasePntInfo readEntity(Cursor cursor, int offset) {
        BasePntInfo entity = new BasePntInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // siteid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sitename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sitecode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sitehigh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sitenum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sitevar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BasePntInfo entity, int offset) {
        entity.setSiteid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSitename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSitecode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSitehigh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSitenum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSitevar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BasePntInfo entity, long rowId) {
        return entity.getSiteid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BasePntInfo entity) {
        if(entity != null) {
            return entity.getSiteid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
