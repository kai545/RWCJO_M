package rwcjom.awit.com.rwcjo_m.dao;

import rwcjom.awit.com.rwcjo_m.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table LINE_STATION.
 */
public class LineStation {

    private String sno;
    private String sb;
    private String sf;
    private String shd_diff;
    private String shd_diff_all;
    private String sr_diff;
    private String sr_diff_diff;
    private String sr_diff_all;
    /** Not-null value. */
    private String f_lc;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LineStationDao myDao;

    private LineExtra lineExtra;
    private String lineExtra__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public LineStation() {
    }

    public LineStation(String sno, String sb, String sf, String shd_diff, String shd_diff_all, String sr_diff, String sr_diff_diff, String sr_diff_all, String f_lc) {
        this.sno = sno;
        this.sb = sb;
        this.sf = sf;
        this.shd_diff = shd_diff;
        this.shd_diff_all = shd_diff_all;
        this.sr_diff = sr_diff;
        this.sr_diff_diff = sr_diff_diff;
        this.sr_diff_all = sr_diff_all;
        this.f_lc = f_lc;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLineStationDao() : null;
    }

    public String getSno() {
        return sno;
    }

    public void setSno(String sno) {
        this.sno = sno;
    }

    public String getSb() {
        return sb;
    }

    public void setSb(String sb) {
        this.sb = sb;
    }

    public String getSf() {
        return sf;
    }

    public void setSf(String sf) {
        this.sf = sf;
    }

    public String getShd_diff() {
        return shd_diff;
    }

    public void setShd_diff(String shd_diff) {
        this.shd_diff = shd_diff;
    }

    public String getShd_diff_all() {
        return shd_diff_all;
    }

    public void setShd_diff_all(String shd_diff_all) {
        this.shd_diff_all = shd_diff_all;
    }

    public String getSr_diff() {
        return sr_diff;
    }

    public void setSr_diff(String sr_diff) {
        this.sr_diff = sr_diff;
    }

    public String getSr_diff_diff() {
        return sr_diff_diff;
    }

    public void setSr_diff_diff(String sr_diff_diff) {
        this.sr_diff_diff = sr_diff_diff;
    }

    public String getSr_diff_all() {
        return sr_diff_all;
    }

    public void setSr_diff_all(String sr_diff_all) {
        this.sr_diff_all = sr_diff_all;
    }

    /** Not-null value. */
    public String getF_lc() {
        return f_lc;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setF_lc(String f_lc) {
        this.f_lc = f_lc;
    }

    /** To-one relationship, resolved on first access. */
    public LineExtra getLineExtra() {
        String __key = this.f_lc;
        if (lineExtra__resolvedKey == null || lineExtra__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LineExtraDao targetDao = daoSession.getLineExtraDao();
            LineExtra lineExtraNew = targetDao.load(__key);
            synchronized (this) {
                lineExtra = lineExtraNew;
            	lineExtra__resolvedKey = __key;
            }
        }
        return lineExtra;
    }

    public void setLineExtra(LineExtra lineExtra) {
        if (lineExtra == null) {
            throw new DaoException("To-one property 'f_lc' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.lineExtra = lineExtra;
            f_lc = lineExtra.getLc();
            lineExtra__resolvedKey = f_lc;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
