package rwcjom.awit.com.rwcjo_m.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import rwcjom.awit.com.rwcjo_m.dao.LineStation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LINE_STATION.
*/
public class LineStationDao extends AbstractDao<LineStation, Void> {

    public static final String TABLENAME = "LINE_STATION";

    /**
     * Properties of entity LineStation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Sno = new Property(0, String.class, "sno", false, "SNO");
        public final static Property Sb = new Property(1, String.class, "sb", false, "SB");
        public final static Property Sf = new Property(2, String.class, "sf", false, "SF");
        public final static Property Shd_diff = new Property(3, String.class, "shd_diff", false, "SHD_DIFF");
        public final static Property Shd_diff_all = new Property(4, String.class, "shd_diff_all", false, "SHD_DIFF_ALL");
        public final static Property Sr_diff = new Property(5, String.class, "sr_diff", false, "SR_DIFF");
        public final static Property Sr_diff_diff = new Property(6, String.class, "sr_diff_diff", false, "SR_DIFF_DIFF");
        public final static Property Sr_diff_all = new Property(7, String.class, "sr_diff_all", false, "SR_DIFF_ALL");
        public final static Property F_lc = new Property(8, String.class, "f_lc", false, "F_LC");
    };

    private DaoSession daoSession;

    private Query<LineStation> lineExtra_LineStationListQuery;

    public LineStationDao(DaoConfig config) {
        super(config);
    }
    
    public LineStationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LINE_STATION' (" + //
                "'SNO' TEXT," + // 0: sno
                "'SB' TEXT," + // 1: sb
                "'SF' TEXT," + // 2: sf
                "'SHD_DIFF' TEXT," + // 3: shd_diff
                "'SHD_DIFF_ALL' TEXT," + // 4: shd_diff_all
                "'SR_DIFF' TEXT," + // 5: sr_diff
                "'SR_DIFF_DIFF' TEXT," + // 6: sr_diff_diff
                "'SR_DIFF_ALL' TEXT," + // 7: sr_diff_all
                "'F_LC' TEXT NOT NULL );"); // 8: f_lc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LINE_STATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LineStation entity) {
        stmt.clearBindings();
 
        String sno = entity.getSno();
        if (sno != null) {
            stmt.bindString(1, sno);
        }
 
        String sb = entity.getSb();
        if (sb != null) {
            stmt.bindString(2, sb);
        }
 
        String sf = entity.getSf();
        if (sf != null) {
            stmt.bindString(3, sf);
        }
 
        String shd_diff = entity.getShd_diff();
        if (shd_diff != null) {
            stmt.bindString(4, shd_diff);
        }
 
        String shd_diff_all = entity.getShd_diff_all();
        if (shd_diff_all != null) {
            stmt.bindString(5, shd_diff_all);
        }
 
        String sr_diff = entity.getSr_diff();
        if (sr_diff != null) {
            stmt.bindString(6, sr_diff);
        }
 
        String sr_diff_diff = entity.getSr_diff_diff();
        if (sr_diff_diff != null) {
            stmt.bindString(7, sr_diff_diff);
        }
 
        String sr_diff_all = entity.getSr_diff_all();
        if (sr_diff_all != null) {
            stmt.bindString(8, sr_diff_all);
        }
        stmt.bindString(9, entity.getF_lc());
    }

    @Override
    protected void attachEntity(LineStation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LineStation readEntity(Cursor cursor, int offset) {
        LineStation entity = new LineStation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sno
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sb
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sf
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shd_diff
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shd_diff_all
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sr_diff
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sr_diff_diff
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sr_diff_all
            cursor.getString(offset + 8) // f_lc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LineStation entity, int offset) {
        entity.setSno(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSb(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSf(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShd_diff(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShd_diff_all(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSr_diff(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSr_diff_diff(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSr_diff_all(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setF_lc(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LineStation entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LineStation entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lineStationList" to-many relationship of LineExtra. */
    public List<LineStation> _queryLineExtra_LineStationList(String f_lc) {
        synchronized (this) {
            if (lineExtra_LineStationListQuery == null) {
                QueryBuilder<LineStation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.F_lc.eq(null));
                lineExtra_LineStationListQuery = queryBuilder.build();
            }
        }
        Query<LineStation> query = lineExtra_LineStationListQuery.forCurrentThread();
        query.setParameter(0, f_lc);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLineExtraDao().getAllColumns());
            builder.append(" FROM LINE_STATION T");
            builder.append(" LEFT JOIN LINE_EXTRA T0 ON T.'F_LC'=T0.'LC'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LineStation loadCurrentDeep(Cursor cursor, boolean lock) {
        LineStation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        LineExtra lineExtra = loadCurrentOther(daoSession.getLineExtraDao(), cursor, offset);
         if(lineExtra != null) {
            entity.setLineExtra(lineExtra);
        }

        return entity;    
    }

    public LineStation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LineStation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LineStation> list = new ArrayList<LineStation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LineStation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LineStation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
