package rwcjom.awit.com.rwcjo_m.dao;

import rwcjom.awit.com.rwcjo_m.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ORI_DATA.
 */
public class OriData {

    private Long id;
    private String bffb;
    private String bfpcode;
    private String bfpl;
    private String bfpvalue;
    private String mtime;
    /** Not-null value. */
    private String f_lc;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OriDataDao myDao;

    private LineExtra lineExtra;
    private String lineExtra__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public OriData() {
    }

    public OriData(Long id) {
        this.id = id;
    }

    public OriData(Long id, String bffb, String bfpcode, String bfpl, String bfpvalue, String mtime, String f_lc) {
        this.id = id;
        this.bffb = bffb;
        this.bfpcode = bfpcode;
        this.bfpl = bfpl;
        this.bfpvalue = bfpvalue;
        this.mtime = mtime;
        this.f_lc = f_lc;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOriDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBffb() {
        return bffb;
    }

    public void setBffb(String bffb) {
        this.bffb = bffb;
    }

    public String getBfpcode() {
        return bfpcode;
    }

    public void setBfpcode(String bfpcode) {
        this.bfpcode = bfpcode;
    }

    public String getBfpl() {
        return bfpl;
    }

    public void setBfpl(String bfpl) {
        this.bfpl = bfpl;
    }

    public String getBfpvalue() {
        return bfpvalue;
    }

    public void setBfpvalue(String bfpvalue) {
        this.bfpvalue = bfpvalue;
    }

    public String getMtime() {
        return mtime;
    }

    public void setMtime(String mtime) {
        this.mtime = mtime;
    }

    /** Not-null value. */
    public String getF_lc() {
        return f_lc;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setF_lc(String f_lc) {
        this.f_lc = f_lc;
    }

    /** To-one relationship, resolved on first access. */
    public LineExtra getLineExtra() {
        String __key = this.f_lc;
        if (lineExtra__resolvedKey == null || lineExtra__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LineExtraDao targetDao = daoSession.getLineExtraDao();
            LineExtra lineExtraNew = targetDao.load(__key);
            synchronized (this) {
                lineExtra = lineExtraNew;
            	lineExtra__resolvedKey = __key;
            }
        }
        return lineExtra;
    }

    public void setLineExtra(LineExtra lineExtra) {
        if (lineExtra == null) {
            throw new DaoException("To-one property 'f_lc' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.lineExtra = lineExtra;
            f_lc = lineExtra.getLc();
            lineExtra__resolvedKey = f_lc;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
