package rwcjom.awit.com.rwcjo_m.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rwcjom.awit.com.rwcjo_m.dao.FaceNews;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FACE_NEWS.
*/
public class FaceNewsDao extends AbstractDao<FaceNews, String> {

    public static final String TABLENAME = "FACE_NEWS";

    /**
     * Properties of entity FaceNews.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Faceid = new Property(0, String.class, "faceid", true, "FACEID");
        public final static Property Facecode = new Property(1, String.class, "facecode", false, "FACECODE");
        public final static Property Facename = new Property(2, String.class, "facename", false, "FACENAME");
    };


    public FaceNewsDao(DaoConfig config) {
        super(config);
    }
    
    public FaceNewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FACE_NEWS' (" + //
                "'FACEID' TEXT PRIMARY KEY NOT NULL ," + // 0: faceid
                "'FACECODE' TEXT," + // 1: facecode
                "'FACENAME' TEXT);"); // 2: facename
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FACE_NEWS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FaceNews entity) {
        stmt.clearBindings();
 
        String faceid = entity.getFaceid();
        if (faceid != null) {
            stmt.bindString(1, faceid);
        }
 
        String facecode = entity.getFacecode();
        if (facecode != null) {
            stmt.bindString(2, facecode);
        }
 
        String facename = entity.getFacename();
        if (facename != null) {
            stmt.bindString(3, facename);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FaceNews readEntity(Cursor cursor, int offset) {
        FaceNews entity = new FaceNews( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // faceid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // facecode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // facename
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FaceNews entity, int offset) {
        entity.setFaceid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFacecode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFacename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(FaceNews entity, long rowId) {
        return entity.getFaceid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(FaceNews entity) {
        if(entity != null) {
            return entity.getFaceid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
